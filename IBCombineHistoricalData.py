import glob
import os
import re

#The logic in this file combines the data files generated by IBDownloadHistoricalData which
#looks like 1.txt, 2.txt.... in a folder where each file has many lines of minute data
#Finally the output here will be 1 contiguous data file in chronological order

# these logic allows files to be sorted in natural order
digits = re.compile(r'(\d+)')
def tokenize(filename):
    return tuple(int(token) if match else token
                 for token, match in
                 ((fragment, digits.search(fragment))
                  for fragment in digits.split(filename)))

#pull out date, time, closePrice
def parseLine(line):
    #line could look like #date = 20150307  02:00:00 open=1.2615 high=1.2616 low=1.2615 close=1.26155
    index = line.index("date =")
    dateStr = line[index+6:index+15]
    priceStr = line[index+17:index+25]
    index = line.index("close=")
    indexSpace = line[index:].index(" ")
    closePriceStr = line[index+6:index+indexSpace]

    return dateStr.strip(), priceStr.strip(), closePriceStr.strip()

if __name__ == "__main__":
    dataPath = "C:/Dropbox/CninSrc/JTS/TWS API/samples/Java/Data/CAD/ASK/"
    outFile = "C:/Dropbox/CninSrc/JTS/TWS API/samples/Java/Data/CAD_ASK.txt"

    files = os.listdir(dataPath)
    files.sort(key=tokenize) #this allows files to be sorted in natural order eg 1.txt, 2.txt ... 10.txt instead of 1.txt 10.txt 2.txt etc
    files.reverse() #this makes it reverse natural order

    out = open(outFile, 'w')
    out.truncate()

    for file in files:
        print "Handing: " + file
        f = open (dataPath+file, 'r')
        lines = f.readlines()
        for line in lines:
            date, time, closePrice = parseLine(line)
            time = time.replace(":", "")
            datetime = str(long(date + time))
            out.write(datetime + ", " + closePrice + "\n")

    out.close()
